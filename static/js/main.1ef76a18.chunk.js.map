{"version":3,"sources":["template/Header.js","template/Main.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","rel","ProgressComp","props","id","class","value","num","style","width","Button","console","log","onClick","e","number","document","querySelector","back","limit","initialVal","getAttribute","val","indexOf","calcPercent","Math","round","calc","parseInt","classList","remove","add","setAttribute","innerHTML","valPos","SelectBox","onChange","idProgress","progressEl","getElementsByClassName","i","length","getElementById","map","index","key","Main","state","loading","progData","fetch","then","response","json","data","setState","catch","error","this","bars","buttons","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ef76a18.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <div className=\"logo\">\r\n                <h2>My awesome</h2>\r\n                <h1>PROGRESS BAR</h1>\r\n                <h3>by <a href=\"https://www.linkedin.com/in/simone-moschetta-a03b1588/\" target=\"_blank\" rel=\"noopener noreferrer\">Simone Moschetta</a></h3>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nconst ProgressComp = (props) => {\r\n    return (\r\n        <div id={props.id} className={props.class}>\r\n            <div value={props.value} className=\"percent\">{props.num}</div>\r\n            <div style={{ width: props.num }} className=\"back\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Button = (props) => {\r\n\r\n    function changeBar(e) {\r\n\r\n        let number = document.querySelector(\".progressBar.selected .percent\");\r\n        let back = document.querySelector(\".progressBar.selected .back\");\r\n\r\n        const limit = props.limit;\r\n        let initialVal = number.getAttribute(\"value\");\r\n        let val = e.target.value;\r\n\r\n\r\n        if (val.indexOf('-') === -1) {\r\n\r\n            console.log('Positive!');\r\n\r\n            let initPercent = Math.round(initialVal * 100 / limit);\r\n            let valPercent = Math.round(val * 100 / limit);\r\n            let calcPercent = initPercent + valPercent;\r\n            let calc = parseInt(initialVal) + parseInt(val);\r\n\r\n            back.classList.remove(\"error\");\r\n\r\n            if (calcPercent > 100) {\r\n                back.style.width = \"100%\";\r\n                back.classList.add(\"error\");\r\n            } else {\r\n                back.style.width = calcPercent + \"%\";\r\n            }\r\n\r\n            number.setAttribute(\"value\", calc);\r\n            number.innerHTML = calcPercent + \"%\";\r\n\r\n        } else {\r\n\r\n            console.log('Negative!');\r\n\r\n            let valPos = val * -1;\r\n\r\n            let initPercent = Math.round(initialVal * 100 / limit);\r\n            let valPercent = Math.round(valPos * 100 / limit);\r\n            let calcPercent = initPercent - valPercent;\r\n            let calc = parseInt(initialVal) - parseInt(valPos);\r\n\r\n            if (calcPercent < 0) {\r\n                back.style.width = \"0%\";\r\n                number.setAttribute(\"value\", 0);\r\n                number.innerHTML = \"0%\";\r\n            } else {\r\n                back.style.width = calcPercent + \"%\";\r\n                number.setAttribute(\"value\", calc);\r\n                number.innerHTML = calcPercent + \"%\";\r\n\r\n                if (calcPercent < 100) {\r\n                    back.classList.remove(\"error\");\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(\"Limit: \" + limit, \"ValueBar: \" + number.getAttribute(\"value\"));\r\n\r\n    }\r\n\r\n    console.log(props.value);\r\n\r\n    return (\r\n        <button value={props.value} onClick={changeBar}>\r\n            {(props.value < 0) ? props.value : \"+\" + props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nconst SelectBox = (props) => {\r\n\r\n    function selectBar(e) {\r\n        let idProgress = e.target.value;\r\n        const progressEl = document.getElementsByClassName(\"progressBar\");\r\n        console.log(idProgress);\r\n\r\n        for (let i = 0; i < progressEl.length; i++) {\r\n            progressEl[i].classList.remove(\"selected\");\r\n        }\r\n        document.getElementById(idProgress).classList.add(\"selected\");\r\n    }\r\n\r\n    return (\r\n        <select onChange={selectBar}>\r\n            {\r\n                props.value.map((value, index) =>\r\n                    <option key={index} value={'progress' + index}>Progress {index + 1}</option>\r\n                )\r\n            }\r\n        </select>\r\n    );\r\n}\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            progData: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://pb-api.herokuapp.com/bars')\r\n            .then(response => { return response.json(); })\r\n            .then((data) => { this.setState({ progData: data, loading: false }) })\r\n            .catch((error) => { this.setState({ error }) });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { progData, loading, error } = this.state;\r\n\r\n        if (error) {\r\n            return <main><span>Something went wrong...</span></main>;\r\n        } else if (loading) {\r\n            return <main><h2>Please wait...</h2></main>;\r\n        } else {\r\n            // Log correctly\r\n            console.log(progData.bars, progData.limit);\r\n            return (\r\n                <main>\r\n                    <section id=\"progressBox\">\r\n                        {progData && progData.bars && (\r\n                            progData.bars.map((value, index) =>\r\n                                <ProgressComp\r\n                                    class={index === 0 ? \"progressBar selected\" : \"progressBar\"}\r\n                                    key={index}\r\n                                    id={'progress' + index}\r\n                                    value={value}\r\n                                    num={Math.round(value * 100 / progData.limit) + '%'}\r\n                                />\r\n                            )\r\n                        )}\r\n                    </section>\r\n\r\n                    <section id=\"controls\">\r\n\r\n                        <div className=\"choose\">\r\n                            <span>Choose your progress bar:</span>\r\n                            {progData && progData.bars && (\r\n                                <SelectBox value={progData.bars} />\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className=\"change\">\r\n                            <span>Change your progress bar:</span>\r\n                            {progData && progData.buttons && (\r\n                                progData.buttons.map((value, index) =>\r\n                                    <Button key={index} limit={progData.limit} value={value} />\r\n                                )\r\n                            )}\r\n                        </div>\r\n\r\n                    </section>\r\n                </main>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './template/Header';\nimport Main from './template/Main';\nimport \"./scss/main.scss\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<div id=\"container\"><Header /><Main /></div>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}