{"version":3,"sources":["template/Header.js","template/Main.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","rel","ProgressComp","Math","round","this","props","info","val","limit","barActive","action","index","onClick","percentBar","style","width","Component","Button","btnValue","value","barInfo","bar","progressActive","document","getElementsByClassName","number","querySelector","back","calcPercent","calc","parseInt","classList","remove","add","innerHTML","valPos","valueBar","changeValue","Main","changeBar","bind","changeVal","state","loading","bars","buttons","selectedBar","fetch","then","response","json","data","arrayBar","map","x","i","setState","catch","error","newBars","console","clear","log","JSON","stringify","id","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94058089.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <div className=\"logo\">\r\n                <h2>Calculate</h2>\r\n                <h1>Your budget</h1>\r\n                <h3>by <a href=\"https://www.linkedin.com/in/simone-moschetta-a03b1588/\" target=\"_blank\" rel=\"noopener noreferrer\">Simone Moschetta</a></h3>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ProgressComp extends Component {\r\n\r\n    percentBar() {\r\n        let percentOfLimit = Math.round(this.props.info.val * 100 / this.props.limit) + '%';\r\n        return percentOfLimit;\r\n    }\r\n\r\n    render() {\r\n\r\n        let { barActive, info, action } = this.props;\r\n\r\n        let className = (barActive === info.index) ? \"progressBar selected\" : \"progressBar\";\r\n\r\n        return (\r\n            <div className={className} onClick={() => action(info.index)} >\r\n                <div className=\"percent\">{this.percentBar()}</div>\r\n                <div className=\"back\" style={{ width: this.percentBar() }}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Button extends Component {\r\n\r\n    changeValue() {\r\n\r\n        const btnValue = this.props.value;\r\n        const limit = this.props.limit;\r\n        const barInfo = this.props.bar;\r\n\r\n        const progressActive = document.getElementsByClassName(\"progressBar\")[barInfo.index];\r\n        let number = progressActive.querySelector(\".percent\");\r\n        let back = progressActive.querySelector(\".back\");\r\n\r\n        if (btnValue >= 0) {\r\n\r\n            //console.log('Positive!');\r\n\r\n            let initPercent = Math.round(barInfo.val * 100 / limit);\r\n            let valPercent = Math.round(btnValue * 100 / limit);\r\n            let calcPercent = initPercent + valPercent;\r\n            let calc = parseInt(barInfo.val) + parseInt(btnValue);\r\n\r\n            back.classList.remove(\"error\");\r\n\r\n            if (calcPercent > 100) {\r\n                back.style.width = \"100%\";\r\n                back.classList.add(\"error\");\r\n            } else {\r\n                back.style.width = calcPercent + \"%\";\r\n            }\r\n\r\n            number.innerHTML = calcPercent + \"%\";\r\n            this.props.action(calc);\r\n\r\n        } else {\r\n\r\n            //console.log('Negative!');\r\n\r\n            let valPos = btnValue * -1; //- Transform to positive to do calc\r\n\r\n            let initPercent = Math.round(barInfo.val * 100 / limit);\r\n            let valPercent = Math.round(valPos * 100 / limit);\r\n            let calcPercent = initPercent - valPercent;\r\n            let calc = parseInt(barInfo.val) - parseInt(valPos);\r\n\r\n            if (calcPercent < 0) {\r\n                back.style.width = \"0%\";\r\n                number.innerHTML = \"0%\";\r\n                this.props.action(0);\r\n            } else {\r\n                back.style.width = calcPercent + \"%\";\r\n                number.innerHTML = calcPercent + \"%\";\r\n                this.props.action(calc);\r\n\r\n                if (calcPercent < 100) {\r\n                    back.classList.remove(\"error\");\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const valueBar = this.props.value;\r\n\r\n        return (\r\n            <button onClick={() => this.changeValue()}>\r\n                {(valueBar < 0) ? valueBar + \" $\" : \"+\" + valueBar + \" $\"}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.changeBar = this.changeBar.bind(this);\r\n        this.changeVal = this.changeVal.bind(this);\r\n        this.state = {\r\n            loading: true,\r\n            bars: [],\r\n            buttons: [],\r\n            limit: 0,\r\n            selectedBar: 0 // First one on init\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //- API call data get\r\n        //- Setting first bar selected\r\n\r\n        fetch('https://pb-api.herokuapp.com/bars')\r\n            .then(response => { return response.json(); })\r\n            .then((data) => {\r\n\r\n                // Manage data bars\r\n                let arrayBar = data.bars.map(function (x, i) {\r\n                    return {\r\n                        index: i,\r\n                        val: x\r\n                    };\r\n                });\r\n\r\n                this.setState({\r\n                    loading: false,\r\n                    bars: arrayBar,\r\n                    buttons: data.buttons,\r\n                    limit: data.limit\r\n                })\r\n            })\r\n            .catch((error) => { this.setState({ error }) });\r\n\r\n    }\r\n\r\n    changeBar(val) {\r\n        this.setState({\r\n            selectedBar: val\r\n        })\r\n    }\r\n\r\n    changeVal(val) {\r\n        let newBars = this.state.bars;\r\n        newBars[this.state.selectedBar].val = val;\r\n\r\n        this.setState({\r\n            bars: newBars\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { bars, buttons, limit, selectedBar, loading, error } = this.state;\r\n\r\n        if (error) {\r\n            return <main><span>Something went wrong...</span></main>;\r\n        } else if (loading) {\r\n            return <main><h2>Please wait...</h2></main>;\r\n        } else {\r\n\r\n            console.clear();\r\n\r\n            // Log correctly\r\n            console.log(\r\n                \"Progress bars: \" + JSON.stringify(bars)\r\n            );\r\n\r\n            console.log(\r\n                \"Buttons: \" + buttons,\r\n                \"Limit: \" + limit,\r\n                \"Bar Selected: \" + selectedBar\r\n            );\r\n\r\n            return (\r\n                <main>\r\n                    <section id=\"progressBox\">\r\n                        <span>Choose your progress bar:</span>\r\n                        <div className=\"choose\">\r\n                            {bars && (\r\n                                bars.map((barInfo, index) =>\r\n                                    <ProgressComp\r\n                                        key={index}\r\n                                        info={barInfo}\r\n                                        barActive={selectedBar}\r\n                                        limit={limit}\r\n                                        action={this.changeBar}\r\n                                    />\r\n                                )\r\n                            )}\r\n                        </div>\r\n                    </section>\r\n\r\n                    <section id=\"controls\">\r\n                        <div className=\"change\">\r\n                            <span>Add or remove money:</span>\r\n                            {buttons && (\r\n                                buttons.map((value, index) =>\r\n                                    <Button\r\n                                        key={index}\r\n                                        value={value}\r\n                                        limit={limit}\r\n                                        bar={bars[selectedBar]}\r\n                                        action={this.changeVal}\r\n                                    />\r\n                                )\r\n                            )}\r\n                        </div>\r\n                    </section>\r\n\r\n                    <section id=\"limit\">\r\n                        <span>Budget limit: {limit}$ <i>(limit = 100%)</i></span>\r\n                    </section>\r\n                </main>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './template/Header';\nimport Main from './template/Main';\nimport \"./scss/main.scss\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<div id=\"container\"><Header /><Main /></div>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}