{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Simone\\\\Documents\\\\WebDesign\\\\_Testing\\\\progress-bar\\\\src\\\\template\\\\Main.js\";\nimport React, { Component } from 'react';\n\nclass ProgressComp extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      id: this.props.id,\n      className: this.props.class,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      value: this.props.value,\n      className: \"percent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, this.props.num), React.createElement(\"div\", {\n      style: {\n        width: this.props.num\n      },\n      className: \"back\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass Button extends React.Component {\n  changeBar(e) {\n    let number = document.querySelector(\".progressBar.selected .percent\");\n    let back = document.querySelector(\".progressBar.selected .back\");\n    const limit = this.props.limit;\n    let initialVal = number.getAttribute(\"value\");\n    let val = e.target.value;\n    console.log(limit);\n\n    if (val.indexOf('-') === -1) {\n      console.log('Positive!');\n      let initPercent = parseInt(initialVal * 100 / limit);\n      let valPercent = parseInt(val * 100 / limit);\n      let calc = initPercent + valPercent;\n      back.classList.remove(\"error\");\n\n      if (calc > 100) {\n        back.style.width = \"100%\";\n        back.classList.add(\"error\");\n      } else {\n        back.style.width = calc + \"%\";\n      }\n\n      number.setAttribute(\"value\", calc);\n      number.innerHTML = calc + \"%\";\n    } else {\n      console.log('Negative!');\n      let valPos = val * -1;\n      let initPercent = parseInt(initialVal * 100 / limit);\n      let valPercent = parseInt(valPos * 100 / limit);\n      let calc = initPercent - valPercent;\n\n      if (calc < 0) {\n        back.style.width = \"0%\";\n        number.setAttribute(\"value\", 0);\n        number.innerHTML = \"0%\";\n      } else {\n        back.style.width = calc + \"%\";\n        number.setAttribute(\"value\", calc);\n        number.innerHTML = calc + \"%\";\n\n        if (calc < 100) {\n          back.classList.remove(\"error\");\n        }\n      }\n    }\n\n    console.log(initialVal);\n    console.log(val);\n  }\n\n  render() {\n    return React.createElement(\"button\", {\n      value: this.props.value,\n      onClick: this.changeBar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.props.value);\n  }\n\n}\n\nclass SelectBox extends React.Component {\n  selectBar(e) {\n    let idProgress = e.target.value;\n    const progressEl = document.getElementsByClassName(\"progressBar\");\n    console.log(idProgress);\n\n    for (let i = 0; i < progressEl.length; i++) {\n      progressEl[i].classList.remove(\"selected\");\n    }\n\n    document.getElementById(idProgress).classList.add(\"selected\");\n  }\n\n  render() {\n    return React.createElement(\"select\", {\n      onChange: this.selectBar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.props.value.map((value, index) => React.createElement(\"option\", {\n      key: index,\n      value: 'progress' + index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Progress \", index + 1)));\n  }\n\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      progData: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://pb-api.herokuapp.com/bars').then(response => {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        progData: data,\n        loading: false\n      });\n    }).catch(error => {\n      this.setState({\n        error\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          progData = _this$state.progData,\n          loading = _this$state.loading,\n          error = _this$state.error;\n\n    if (error) {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Something went wrong...\"));\n    } else if (loading) {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Please wait...\"));\n    } else {\n      // Log correctly\n      console.log(progData.bars);\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        id: \"progressBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, progData && progData.bars && progData.bars.map((value, index) => React.createElement(ProgressComp, {\n        class: index === 0 ? \"progressBar selected\" : \"progressBar\",\n        key: index,\n        id: 'progress' + index,\n        value: value,\n        num: value + '%',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }))), React.createElement(\"section\", {\n        id: \"controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"choose\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Choose your progress bar:\"), progData && progData.bars && React.createElement(SelectBox, {\n        value: progData.bars,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"change\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Change your progress bar:\"), progData && progData.buttons && progData.buttons.map((value, index) => React.createElement(Button, {\n        key: index,\n        limit: progData.limit,\n        value: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })))));\n    }\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Simone/Documents/WebDesign/_Testing/progress-bar/src/template/Main.js"],"names":["React","Component","ProgressComp","render","props","id","class","value","num","width","Button","changeBar","e","number","document","querySelector","back","limit","initialVal","getAttribute","val","target","console","log","indexOf","initPercent","parseInt","valPercent","calc","classList","remove","style","add","setAttribute","innerHTML","valPos","SelectBox","selectBar","idProgress","progressEl","getElementsByClassName","i","length","getElementById","map","index","Main","constructor","state","loading","progData","componentDidMount","fetch","then","response","json","data","setState","catch","error","bars","buttons"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ProgressComp extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id={this.props.id} className={this.props.class}>\r\n                <div value={this.props.value} className=\"percent\">{this.props.num}</div>\r\n                <div style={{ width: this.props.num }} className=\"back\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Button extends React.Component {\r\n\r\n    changeBar(e) {\r\n\r\n        let number = document.querySelector(\".progressBar.selected .percent\");\r\n        let back = document.querySelector(\".progressBar.selected .back\");\r\n\r\n        const limit = this.props.limit;\r\n        let initialVal = number.getAttribute(\"value\");\r\n        let val = e.target.value;\r\n\r\n        console.log(limit);\r\n\r\n        if (val.indexOf('-') === -1) {\r\n\r\n            console.log('Positive!');\r\n\r\n            let initPercent = parseInt(initialVal * 100 / limit);\r\n            let valPercent = parseInt(val * 100 / limit);\r\n            let calc = initPercent + valPercent;\r\n\r\n            back.classList.remove(\"error\");\r\n\r\n            if (calc > 100) {\r\n                back.style.width = \"100%\";\r\n                back.classList.add(\"error\");\r\n            } else {\r\n                back.style.width = calc + \"%\";\r\n            }\r\n\r\n            number.setAttribute(\"value\", calc);\r\n            number.innerHTML = calc + \"%\";\r\n\r\n        } else {\r\n\r\n            console.log('Negative!');\r\n\r\n            let valPos = val * -1;\r\n\r\n            let initPercent = parseInt(initialVal * 100 / limit);\r\n            let valPercent = parseInt(valPos * 100 / limit);\r\n            let calc = initPercent - valPercent;\r\n\r\n            if (calc < 0) {\r\n                back.style.width = \"0%\";\r\n                number.setAttribute(\"value\", 0);\r\n                number.innerHTML = \"0%\";\r\n            } else {\r\n                back.style.width = calc + \"%\";\r\n                number.setAttribute(\"value\", calc);\r\n                number.innerHTML = calc + \"%\";\r\n\r\n                if (calc < 100) {\r\n                    back.classList.remove(\"error\");\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(initialVal);\r\n        console.log(val);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <button value={this.props.value} onClick={this.changeBar}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass SelectBox extends React.Component {\r\n\r\n    selectBar(e) {\r\n        let idProgress = e.target.value;\r\n        const progressEl = document.getElementsByClassName(\"progressBar\");\r\n        console.log(idProgress);\r\n\r\n        for (let i = 0; i < progressEl.length; i++) {\r\n            progressEl[i].classList.remove(\"selected\");\r\n        }\r\n        document.getElementById(idProgress).classList.add(\"selected\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <select onChange={this.selectBar}>\r\n                {\r\n                    this.props.value.map((value, index) =>\r\n                        <option key={index} value={'progress' + index}>Progress {index + 1}</option>\r\n                    )\r\n                }\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            progData: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://pb-api.herokuapp.com/bars')\r\n            .then(response => { return response.json(); })\r\n            .then((data) => { this.setState({ progData: data, loading: false }) })\r\n            .catch((error) => { this.setState({ error }) });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { progData, loading, error } = this.state;\r\n\r\n        if (error) {\r\n            return <main><span>Something went wrong...</span></main>;\r\n        } else if (loading) {\r\n            return <main><h2>Please wait...</h2></main>;\r\n        } else {\r\n            // Log correctly\r\n            console.log(progData.bars);\r\n            return (\r\n                <main>\r\n                    <section id=\"progressBox\">\r\n                        {progData && progData.bars && (\r\n                            progData.bars.map((value, index) =>\r\n                                <ProgressComp class={index === 0 ? \"progressBar selected\" : \"progressBar\"} key={index} id={'progress' + index} value={value} num={value + '%'} />\r\n                            )\r\n                        )}\r\n                    </section>\r\n\r\n                    <section id=\"controls\">\r\n\r\n                        <div className=\"choose\">\r\n                            <span>Choose your progress bar:</span>\r\n                            {progData && progData.bars && (\r\n                                <SelectBox value={progData.bars} />\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className=\"change\">\r\n                            <span>Change your progress bar:</span>\r\n                            {progData && progData.buttons && (\r\n                                progData.buttons.map((value, index) =>\r\n                                    <Button key={index} limit={progData.limit} value={value} />\r\n                                )\r\n                            )}\r\n                        </div>\r\n\r\n                    </section>\r\n                </main>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}