{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Simone\\\\Documents\\\\WebDesign\\\\_Testing\\\\progress-bar\\\\src\\\\template\\\\Main.js\";\nimport React, { Component } from 'react';\n\nclass ProgressComp extends Component {\n  selectBar() {\n    const progressEl = document.getElementsByClassName(\"progressBar\");\n\n    for (let i = 0; i < progressEl.length; i++) {\n      progressEl[i].classList.remove(\"selected\");\n    }\n\n    progressEl[this.props.index].classList.add(\"selected\");\n    this.props.action(this.props.index);\n  }\n\n  percentBar() {\n    let percentOfLimit = Math.round(this.props.value * 100 / this.props.limit) + '%';\n    return percentOfLimit;\n  }\n\n  render() {\n    let className = this.props.barActive === this.props.barInfo.index ? \"progressBar selected\" : \"progressBar\";\n    return React.createElement(\"div\", {\n      className: className,\n      onClick: () => this.selectBar(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"percent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, this.percentBar()), React.createElement(\"div\", {\n      style: {\n        width: this.percentBar()\n      },\n      className: \"back\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass Button extends Component {\n  changeBar(e) {\n    let number = document.querySelector(\".progressBar.selected .percent\");\n    let back = document.querySelector(\".progressBar.selected .back\");\n    const limit = this.state.limit;\n    let initialVal = this.state.initValue; //- Initial value\n\n    const val = this.sate.value; //- Button value\n\n    if (val.indexOf('-') === -1) {\n      console.log('Positive!');\n      let initPercent = Math.round(initialVal * 100 / limit);\n      let valPercent = Math.round(val * 100 / limit);\n      let calcPercent = initPercent + valPercent;\n      let calc = parseInt(initialVal) + parseInt(val);\n      back.classList.remove(\"error\");\n\n      if (calcPercent > 100) {\n        back.style.width = \"100%\";\n        back.classList.add(\"error\");\n      } else {\n        back.style.width = calcPercent + \"%\";\n      }\n\n      number.setAttribute(\"value\", calc);\n      number.innerHTML = calcPercent + \"%\";\n    } else {\n      console.log('Negative!');\n      let valPos = val * -1;\n      let initPercent = Math.round(initialVal * 100 / limit);\n      let valPercent = Math.round(valPos * 100 / limit);\n      let calcPercent = initPercent - valPercent;\n      let calc = parseInt(initialVal) - parseInt(valPos);\n\n      if (calcPercent < 0) {\n        back.style.width = \"0%\";\n        number.setAttribute(\"value\", 0);\n        number.innerHTML = \"0%\";\n      } else {\n        back.style.width = calcPercent + \"%\";\n        number.setAttribute(\"value\", calc);\n        number.innerHTML = calcPercent + \"%\";\n\n        if (calcPercent < 100) {\n          back.classList.remove(\"error\");\n        }\n      }\n    }\n  }\n\n  render() {\n    const valueBar = this.props.value;\n    return React.createElement(\"button\", {\n      onClick: this.changeBar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, valueBar < 0 ? valueBar + \" $\" : \"+\" + valueBar + \" $\");\n  }\n\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.changeBar = this.changeBar.bind(this);\n    this.state = {\n      loading: true,\n      bars: [],\n      buttons: [],\n      limit: 0,\n      selectedBar: 0 // First one on init\n\n    };\n  }\n\n  componentDidMount() {\n    //- API call data get\n    //- Setting first bar selected\n    fetch('https://pb-api.herokuapp.com/bars').then(response => {\n      return response.json();\n    }).then(data => {\n      // Manage data bars\n      let arrayBar = data.bars.map(function (x, i) {\n        return {\n          index: i,\n          val: x\n        };\n      });\n      this.setState({\n        loading: false,\n        bars: arrayBar,\n        buttons: data.buttons,\n        limit: data.limit\n      });\n    }).catch(error => {\n      this.setState({\n        error\n      });\n    });\n  }\n\n  changeBar(val) {\n    this.setState({\n      selectedBar: val\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          bars = _this$state.bars,\n          buttons = _this$state.buttons,\n          limit = _this$state.limit,\n          selectedBar = _this$state.selectedBar,\n          loading = _this$state.loading,\n          error = _this$state.error;\n\n    if (error) {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Something went wrong...\"));\n    } else if (loading) {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Please wait...\"));\n    } else {\n      // Log correctly\n      console.log(\"Progress bars: \" + JSON.stringify(bars), \"Buttons: \" + buttons, \"Limit: \" + limit, \"Bar Selected: \" + selectedBar);\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        id: \"progressBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Choose your progress bar:\"), React.createElement(\"div\", {\n        className: \"choose\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, bars && bars.map((barInfo, index) => React.createElement(ProgressComp, {\n        key: index,\n        info: barInfo,\n        barActive: selectedBar,\n        limit: limit,\n        action: this.changeBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      })))), React.createElement(\"section\", {\n        id: \"controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"change\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Add or remove money:\"), buttons && buttons.map((value, index) => React.createElement(Button, {\n        key: index,\n        value: value,\n        limit: limit,\n        bar: bars[selectedBar],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      })))), React.createElement(\"section\", {\n        id: \"limit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Budget limit: \", limit, \"$ \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"(limit = 100%)\"))));\n    }\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Simone/Documents/WebDesign/_Testing/progress-bar/src/template/Main.js"],"names":["React","Component","ProgressComp","selectBar","progressEl","document","getElementsByClassName","i","length","classList","remove","props","index","add","action","percentBar","percentOfLimit","Math","round","value","limit","render","className","barActive","barInfo","width","Button","changeBar","e","number","querySelector","back","state","initialVal","initValue","val","sate","indexOf","console","log","initPercent","valPercent","calcPercent","calc","parseInt","style","setAttribute","innerHTML","valPos","valueBar","Main","constructor","bind","loading","bars","buttons","selectedBar","componentDidMount","fetch","then","response","json","data","arrayBar","map","x","setState","catch","error","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ProgressComp extends Component {\r\n\r\n    selectBar() {\r\n        const progressEl = document.getElementsByClassName(\"progressBar\");\r\n\r\n        for (let i = 0; i < progressEl.length; i++) {\r\n            progressEl[i].classList.remove(\"selected\");\r\n        }\r\n\r\n        progressEl[this.props.index].classList.add(\"selected\");\r\n        this.props.action(this.props.index);\r\n    }\r\n\r\n    percentBar() {\r\n        let percentOfLimit = Math.round(this.props.value * 100 / this.props.limit) + '%';\r\n        return percentOfLimit;\r\n    }\r\n\r\n    render() {\r\n        let className = (this.props.barActive === this.props.barInfo.index) ? \"progressBar selected\" : \"progressBar\";\r\n        return (\r\n            <div className={className} onClick={() => this.selectBar()} >\r\n                <div className=\"percent\">{this.percentBar()}</div>\r\n                <div style={{ width: this.percentBar() }} className=\"back\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Button extends Component {\r\n\r\n    changeBar(e) {\r\n\r\n        let number = document.querySelector(\".progressBar.selected .percent\");\r\n        let back = document.querySelector(\".progressBar.selected .back\");\r\n\r\n        const limit = this.state.limit;\r\n        let initialVal = this.state.initValue; //- Initial value\r\n        const val = this.sate.value; //- Button value\r\n\r\n        if (val.indexOf('-') === -1) {\r\n\r\n            console.log('Positive!');\r\n\r\n            let initPercent = Math.round(initialVal * 100 / limit);\r\n            let valPercent = Math.round(val * 100 / limit);\r\n            let calcPercent = initPercent + valPercent;\r\n            let calc = parseInt(initialVal) + parseInt(val);\r\n\r\n            back.classList.remove(\"error\");\r\n\r\n            if (calcPercent > 100) {\r\n                back.style.width = \"100%\";\r\n                back.classList.add(\"error\");\r\n            } else {\r\n                back.style.width = calcPercent + \"%\";\r\n            }\r\n\r\n            number.setAttribute(\"value\", calc);\r\n            number.innerHTML = calcPercent + \"%\";\r\n\r\n        } else {\r\n\r\n            console.log('Negative!');\r\n\r\n            let valPos = val * -1;\r\n\r\n            let initPercent = Math.round(initialVal * 100 / limit);\r\n            let valPercent = Math.round(valPos * 100 / limit);\r\n            let calcPercent = initPercent - valPercent;\r\n            let calc = parseInt(initialVal) - parseInt(valPos);\r\n\r\n            if (calcPercent < 0) {\r\n                back.style.width = \"0%\";\r\n                number.setAttribute(\"value\", 0);\r\n                number.innerHTML = \"0%\";\r\n            } else {\r\n                back.style.width = calcPercent + \"%\";\r\n                number.setAttribute(\"value\", calc);\r\n                number.innerHTML = calcPercent + \"%\";\r\n\r\n                if (calcPercent < 100) {\r\n                    back.classList.remove(\"error\");\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const valueBar = this.props.value;\r\n\r\n        return (\r\n            <button onClick={this.changeBar}>\r\n                {(valueBar < 0) ? valueBar + \" $\" : \"+\" + valueBar + \" $\"}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.changeBar = this.changeBar.bind(this);\r\n        this.state = {\r\n            loading: true,\r\n            bars: [],\r\n            buttons: [],\r\n            limit: 0,\r\n            selectedBar: 0 // First one on init\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //- API call data get\r\n        //- Setting first bar selected\r\n\r\n        fetch('https://pb-api.herokuapp.com/bars')\r\n            .then(response => { return response.json(); })\r\n            .then((data) => {\r\n\r\n                // Manage data bars\r\n                let arrayBar = data.bars.map(function (x, i) {\r\n                    return {\r\n                        index: i,\r\n                        val: x\r\n                    };\r\n                });\r\n\r\n                this.setState({\r\n                    loading: false,\r\n                    bars: arrayBar,\r\n                    buttons: data.buttons,\r\n                    limit: data.limit\r\n                })\r\n            })\r\n            .catch((error) => { this.setState({ error }) });\r\n\r\n    }\r\n\r\n    changeBar(val) {\r\n        this.setState({\r\n            selectedBar: val\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { bars, buttons, limit, selectedBar, loading, error } = this.state;\r\n\r\n        if (error) {\r\n            return <main><span>Something went wrong...</span></main>;\r\n        } else if (loading) {\r\n            return <main><h2>Please wait...</h2></main>;\r\n        } else {\r\n\r\n            // Log correctly\r\n            console.log(\r\n                \"Progress bars: \" + JSON.stringify(bars),\r\n                \"Buttons: \" + buttons,\r\n                \"Limit: \" + limit,\r\n                \"Bar Selected: \" + selectedBar\r\n            );\r\n\r\n            return (\r\n                <main>\r\n                    <section id=\"progressBox\">\r\n                        <span>Choose your progress bar:</span>\r\n                        <div className=\"choose\">\r\n                            {bars && (\r\n                                bars.map((barInfo, index) =>\r\n                                    <ProgressComp\r\n                                        key={index}\r\n                                        info={barInfo}\r\n                                        barActive={selectedBar}\r\n                                        limit={limit}\r\n                                        action={this.changeBar}\r\n                                    />\r\n                                )\r\n                            )}\r\n                        </div>\r\n                    </section>\r\n\r\n                    <section id=\"controls\">\r\n                        <div className=\"change\">\r\n                            <span>Add or remove money:</span>\r\n                            {buttons && (\r\n                                buttons.map((value, index) =>\r\n                                    <Button\r\n                                        key={index}\r\n                                        value={value}\r\n                                        limit={limit}\r\n                                        bar={bars[selectedBar]}\r\n                                    />\r\n                                )\r\n                            )}\r\n                        </div>\r\n                    </section>\r\n\r\n                    <section id=\"limit\">\r\n                        <span>Budget limit: {limit}$ <i>(limit = 100%)</i></span>\r\n                    </section>\r\n                </main>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}