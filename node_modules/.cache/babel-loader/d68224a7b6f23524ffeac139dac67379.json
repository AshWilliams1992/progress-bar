{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Simone\\\\Documents\\\\WebDesign\\\\_Testing\\\\progress-bar\\\\src\\\\template\\\\Main.js\";\nimport React, { Component } from 'react';\n\nconst ProgressComp = props => {\n  return React.createElement(\"div\", {\n    id: props.id,\n    className: props.class,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    value: props.value,\n    className: \"percent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, props.num), React.createElement(\"div\", {\n    style: {\n      width: props.num\n    },\n    className: \"back\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }));\n};\n\nconst Button = props => {\n  function changeBar(e) {\n    let number = document.querySelector(\".progressBar.selected .percent\");\n    let back = document.querySelector(\".progressBar.selected .back\");\n    const limit = props.limit;\n    let initialVal = number.getAttribute(\"value\");\n    let val = e.target.value;\n    console.log(limit);\n\n    if (val.indexOf('-') === -1) {\n      console.log('Positive!');\n      let initPercent = Math.round(initialVal * 100 / limit);\n      let valPercent = Math.round(val * 100 / limit);\n      let calc = initPercent + valPercent;\n      back.classList.remove(\"error\");\n\n      if (calc > 100) {\n        back.style.width = \"100%\";\n        back.classList.add(\"error\");\n      } else {\n        back.style.width = calc + \"%\";\n      }\n\n      number.setAttribute(\"value\", calc);\n      number.innerHTML = calc + \"%\";\n    } else {\n      console.log('Negative!');\n      let valPos = val * -1;\n      let initPercent = Math.round(initialVal * 100 / limit);\n      let valPercent = Math.round(valPos * 100 / limit);\n      let calc = initPercent - valPercent;\n\n      if (calc < 0) {\n        back.style.width = \"0%\";\n        number.setAttribute(\"value\", 0);\n        number.innerHTML = \"0%\";\n      } else {\n        back.style.width = calc + \"%\";\n        number.setAttribute(\"value\", calc);\n        number.innerHTML = calc + \"%\";\n\n        if (calc < 100) {\n          back.classList.remove(\"error\");\n        }\n      }\n    }\n\n    console.log(initialVal);\n    console.log(val);\n  }\n\n  return React.createElement(\"button\", {\n    value: props.value,\n    onClick: changeBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, props.value);\n};\n\nconst SelectBox = props => {\n  function selectBar(e) {\n    let idProgress = e.target.value;\n    const progressEl = document.getElementsByClassName(\"progressBar\");\n    console.log(idProgress);\n\n    for (let i = 0; i < progressEl.length; i++) {\n      progressEl[i].classList.remove(\"selected\");\n    }\n\n    document.getElementById(idProgress).classList.add(\"selected\");\n  }\n\n  return React.createElement(\"select\", {\n    onChange: selectBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, props.value.map((value, index) => React.createElement(\"option\", {\n    key: index,\n    value: 'progress' + index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Progress \", index + 1)));\n};\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      progData: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://pb-api.herokuapp.com/bars').then(response => {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        progData: data,\n        loading: false\n      });\n    }).catch(error => {\n      this.setState({\n        error\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          progData = _this$state.progData,\n          loading = _this$state.loading,\n          error = _this$state.error;\n\n    if (error) {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Something went wrong...\"));\n    } else if (loading) {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Please wait...\"));\n    } else {\n      // Log correctly\n      console.log(progData.bars);\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        id: \"progressBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, progData && progData.bars && progData.bars.map((value, index) => React.createElement(ProgressComp, {\n        class: index === 0 ? \"progressBar selected\" : \"progressBar\",\n        key: index,\n        id: 'progress' + index,\n        value: value,\n        num: Math.round(value * 100 / progData.limit) + '%',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }))), React.createElement(\"section\", {\n        id: \"controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"choose\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Choose your progress bar:\"), progData && progData.bars && React.createElement(SelectBox, {\n        value: progData.bars,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"change\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Change your progress bar:\"), progData && progData.buttons && progData.buttons.map((value, index) => React.createElement(Button, {\n        key: index,\n        limit: progData.limit,\n        value: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })))));\n    }\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Simone/Documents/WebDesign/_Testing/progress-bar/src/template/Main.js"],"names":["React","Component","ProgressComp","props","id","class","value","num","width","Button","changeBar","e","number","document","querySelector","back","limit","initialVal","getAttribute","val","target","console","log","indexOf","initPercent","Math","round","valPercent","calc","classList","remove","style","add","setAttribute","innerHTML","valPos","SelectBox","selectBar","idProgress","progressEl","getElementsByClassName","i","length","getElementById","map","index","Main","constructor","state","loading","progData","componentDidMount","fetch","then","response","json","data","setState","catch","error","render","bars","buttons"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B,SACI;AAAK,IAAA,EAAE,EAAEA,KAAK,CAACC,EAAf;AAAmB,IAAA,SAAS,EAAED,KAAK,CAACE,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAEF,KAAK,CAACG,KAAlB;AAAyB,IAAA,SAAS,EAAC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8CH,KAAK,CAACI,GAApD,CADJ,EAEI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAEL,KAAK,CAACI;AAAf,KAAZ;AAAkC,IAAA,SAAS,EAAC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CAPD;;AASA,MAAME,MAAM,GAAIN,KAAD,IAAW;AAEtB,WAASO,SAAT,CAAmBC,CAAnB,EAAsB;AAElB,QAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,gCAAvB,CAAb;AACA,QAAIC,IAAI,GAAGF,QAAQ,CAACC,aAAT,CAAuB,6BAAvB,CAAX;AAEA,UAAME,KAAK,GAAGb,KAAK,CAACa,KAApB;AACA,QAAIC,UAAU,GAAGL,MAAM,CAACM,YAAP,CAAoB,OAApB,CAAjB;AACA,QAAIC,GAAG,GAAGR,CAAC,CAACS,MAAF,CAASd,KAAnB;AAEAe,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;;AAEA,QAAIG,GAAG,CAACI,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;AAEzBF,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEA,UAAIE,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWT,UAAU,GAAG,GAAb,GAAmBD,KAA9B,CAAlB;AACA,UAAIW,UAAU,GAAGF,IAAI,CAACC,KAAL,CAAWP,GAAG,GAAG,GAAN,GAAYH,KAAvB,CAAjB;AACA,UAAIY,IAAI,GAAGJ,WAAW,GAAGG,UAAzB;AAEAZ,MAAAA,IAAI,CAACc,SAAL,CAAeC,MAAf,CAAsB,OAAtB;;AAEA,UAAIF,IAAI,GAAG,GAAX,EAAgB;AACZb,QAAAA,IAAI,CAACgB,KAAL,CAAWvB,KAAX,GAAmB,MAAnB;AACAO,QAAAA,IAAI,CAACc,SAAL,CAAeG,GAAf,CAAmB,OAAnB;AACH,OAHD,MAGO;AACHjB,QAAAA,IAAI,CAACgB,KAAL,CAAWvB,KAAX,GAAmBoB,IAAI,GAAG,GAA1B;AACH;;AAEDhB,MAAAA,MAAM,CAACqB,YAAP,CAAoB,OAApB,EAA6BL,IAA7B;AACAhB,MAAAA,MAAM,CAACsB,SAAP,GAAmBN,IAAI,GAAG,GAA1B;AAEH,KApBD,MAoBO;AAEHP,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEA,UAAIa,MAAM,GAAGhB,GAAG,GAAG,CAAC,CAApB;AAEA,UAAIK,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWT,UAAU,GAAG,GAAb,GAAmBD,KAA9B,CAAlB;AACA,UAAIW,UAAU,GAAGF,IAAI,CAACC,KAAL,CAAWS,MAAM,GAAG,GAAT,GAAenB,KAA1B,CAAjB;AACA,UAAIY,IAAI,GAAGJ,WAAW,GAAGG,UAAzB;;AAEA,UAAIC,IAAI,GAAG,CAAX,EAAc;AACVb,QAAAA,IAAI,CAACgB,KAAL,CAAWvB,KAAX,GAAmB,IAAnB;AACAI,QAAAA,MAAM,CAACqB,YAAP,CAAoB,OAApB,EAA6B,CAA7B;AACArB,QAAAA,MAAM,CAACsB,SAAP,GAAmB,IAAnB;AACH,OAJD,MAIO;AACHnB,QAAAA,IAAI,CAACgB,KAAL,CAAWvB,KAAX,GAAmBoB,IAAI,GAAG,GAA1B;AACAhB,QAAAA,MAAM,CAACqB,YAAP,CAAoB,OAApB,EAA6BL,IAA7B;AACAhB,QAAAA,MAAM,CAACsB,SAAP,GAAmBN,IAAI,GAAG,GAA1B;;AAEA,YAAIA,IAAI,GAAG,GAAX,EAAgB;AACZb,UAAAA,IAAI,CAACc,SAAL,CAAeC,MAAf,CAAsB,OAAtB;AACH;AACJ;AACJ;;AAEDT,IAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACH;;AAGD,SACI;AAAQ,IAAA,KAAK,EAAEhB,KAAK,CAACG,KAArB;AAA4B,IAAA,OAAO,EAAEI,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,KAAK,CAACG,KADX,CADJ;AAKH,CApED;;AAsEA,MAAM8B,SAAS,GAAIjC,KAAD,IAAW;AAEzB,WAASkC,SAAT,CAAmB1B,CAAnB,EAAsB;AAClB,QAAI2B,UAAU,GAAG3B,CAAC,CAACS,MAAF,CAASd,KAA1B;AACA,UAAMiC,UAAU,GAAG1B,QAAQ,CAAC2B,sBAAT,CAAgC,aAAhC,CAAnB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,UAAZ;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACG,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCF,MAAAA,UAAU,CAACE,CAAD,CAAV,CAAcZ,SAAd,CAAwBC,MAAxB,CAA+B,UAA/B;AACH;;AACDjB,IAAAA,QAAQ,CAAC8B,cAAT,CAAwBL,UAAxB,EAAoCT,SAApC,CAA8CG,GAA9C,CAAkD,UAAlD;AACH;;AAED,SACI;AAAQ,IAAA,QAAQ,EAAEK,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQlC,KAAK,CAACG,KAAN,CAAYsC,GAAZ,CAAgB,CAACtC,KAAD,EAAQuC,KAAR,KACZ;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,KAAK,EAAE,aAAaA,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAyDA,KAAK,GAAG,CAAjE,CADJ,CAFR,CADJ;AASH,CAtBD;;AAwBA,MAAMC,IAAN,SAAmB7C,SAAnB,CAA6B;AAEzB8C,EAAAA,WAAW,CAAC5C,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAK6C,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,IADA;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,kCAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAI;AAAE,aAAOA,QAAQ,CAACC,IAAT,EAAP;AAAyB,KADjD,EAEKF,IAFL,CAEWG,IAAD,IAAU;AAAE,WAAKC,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAEM,IAAZ;AAAkBP,QAAAA,OAAO,EAAE;AAA3B,OAAd;AAAmD,KAFzE,EAGKS,KAHL,CAGYC,KAAD,IAAW;AAAE,WAAKF,QAAL,CAAc;AAAEE,QAAAA;AAAF,OAAd;AAA0B,KAHlD;AAIH;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBAEgC,KAAKZ,KAFrC;AAAA,UAEGE,QAFH,eAEGA,QAFH;AAAA,UAEaD,OAFb,eAEaA,OAFb;AAAA,UAEsBU,KAFtB,eAEsBA,KAFtB;;AAIL,QAAIA,KAAJ,EAAW;AACP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAN,CAAP;AACH,KAFD,MAEO,IAAIV,OAAJ,EAAa;AAChB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAN,CAAP;AACH,KAFM,MAEA;AACH;AACA5B,MAAAA,OAAO,CAACC,GAAR,CAAY4B,QAAQ,CAACW,IAArB;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAS,QAAA,EAAE,EAAC,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKX,QAAQ,IAAIA,QAAQ,CAACW,IAArB,IACGX,QAAQ,CAACW,IAAT,CAAcjB,GAAd,CAAkB,CAACtC,KAAD,EAAQuC,KAAR,KACd,oBAAC,YAAD;AACI,QAAA,KAAK,EAAEA,KAAK,KAAK,CAAV,GAAc,sBAAd,GAAuC,aADlD;AAEI,QAAA,GAAG,EAAEA,KAFT;AAGI,QAAA,EAAE,EAAE,aAAaA,KAHrB;AAII,QAAA,KAAK,EAAEvC,KAJX;AAKI,QAAA,GAAG,EAAEmB,IAAI,CAACC,KAAL,CAAWpB,KAAK,GAAG,GAAR,GAAc4C,QAAQ,CAAClC,KAAlC,IAA2C,GALpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFR,CADJ,EAeI;AAAS,QAAA,EAAE,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,EAEKkC,QAAQ,IAAIA,QAAQ,CAACW,IAArB,IACG,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAEX,QAAQ,CAACW,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHR,CAFJ,EASI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,EAEKX,QAAQ,IAAIA,QAAQ,CAACY,OAArB,IACGZ,QAAQ,CAACY,OAAT,CAAiBlB,GAAjB,CAAqB,CAACtC,KAAD,EAAQuC,KAAR,KACjB,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,KAAb;AAAoB,QAAA,KAAK,EAAEK,QAAQ,CAAClC,KAApC;AAA2C,QAAA,KAAK,EAAEV,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAHR,CATJ,CAfJ,CADJ;AAqCH;AACJ;;AAlEwB;;AAqE7B,eAAewC,IAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst ProgressComp = (props) => {\r\n    return (\r\n        <div id={props.id} className={props.class}>\r\n            <div value={props.value} className=\"percent\">{props.num}</div>\r\n            <div style={{ width: props.num }} className=\"back\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Button = (props) => {\r\n\r\n    function changeBar(e) {\r\n\r\n        let number = document.querySelector(\".progressBar.selected .percent\");\r\n        let back = document.querySelector(\".progressBar.selected .back\");\r\n\r\n        const limit = props.limit;\r\n        let initialVal = number.getAttribute(\"value\");\r\n        let val = e.target.value;\r\n\r\n        console.log(limit);\r\n\r\n        if (val.indexOf('-') === -1) {\r\n\r\n            console.log('Positive!');\r\n\r\n            let initPercent = Math.round(initialVal * 100 / limit);\r\n            let valPercent = Math.round(val * 100 / limit);\r\n            let calc = initPercent + valPercent;\r\n\r\n            back.classList.remove(\"error\");\r\n\r\n            if (calc > 100) {\r\n                back.style.width = \"100%\";\r\n                back.classList.add(\"error\");\r\n            } else {\r\n                back.style.width = calc + \"%\";\r\n            }\r\n\r\n            number.setAttribute(\"value\", calc);\r\n            number.innerHTML = calc + \"%\";\r\n\r\n        } else {\r\n\r\n            console.log('Negative!');\r\n\r\n            let valPos = val * -1;\r\n\r\n            let initPercent = Math.round(initialVal * 100 / limit);\r\n            let valPercent = Math.round(valPos * 100 / limit);\r\n            let calc = initPercent - valPercent;\r\n\r\n            if (calc < 0) {\r\n                back.style.width = \"0%\";\r\n                number.setAttribute(\"value\", 0);\r\n                number.innerHTML = \"0%\";\r\n            } else {\r\n                back.style.width = calc + \"%\";\r\n                number.setAttribute(\"value\", calc);\r\n                number.innerHTML = calc + \"%\";\r\n\r\n                if (calc < 100) {\r\n                    back.classList.remove(\"error\");\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(initialVal);\r\n        console.log(val);\r\n    }\r\n\r\n\r\n    return (\r\n        <button value={props.value} onClick={changeBar}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nconst SelectBox = (props) => {\r\n\r\n    function selectBar(e) {\r\n        let idProgress = e.target.value;\r\n        const progressEl = document.getElementsByClassName(\"progressBar\");\r\n        console.log(idProgress);\r\n\r\n        for (let i = 0; i < progressEl.length; i++) {\r\n            progressEl[i].classList.remove(\"selected\");\r\n        }\r\n        document.getElementById(idProgress).classList.add(\"selected\");\r\n    }\r\n\r\n    return (\r\n        <select onChange={selectBar}>\r\n            {\r\n                props.value.map((value, index) =>\r\n                    <option key={index} value={'progress' + index}>Progress {index + 1}</option>\r\n                )\r\n            }\r\n        </select>\r\n    );\r\n}\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            progData: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://pb-api.herokuapp.com/bars')\r\n            .then(response => { return response.json(); })\r\n            .then((data) => { this.setState({ progData: data, loading: false }) })\r\n            .catch((error) => { this.setState({ error }) });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { progData, loading, error } = this.state;\r\n\r\n        if (error) {\r\n            return <main><span>Something went wrong...</span></main>;\r\n        } else if (loading) {\r\n            return <main><h2>Please wait...</h2></main>;\r\n        } else {\r\n            // Log correctly\r\n            console.log(progData.bars);\r\n            return (\r\n                <main>\r\n                    <section id=\"progressBox\">\r\n                        {progData && progData.bars && (\r\n                            progData.bars.map((value, index) =>\r\n                                <ProgressComp\r\n                                    class={index === 0 ? \"progressBar selected\" : \"progressBar\"}\r\n                                    key={index}\r\n                                    id={'progress' + index}\r\n                                    value={value}\r\n                                    num={Math.round(value * 100 / progData.limit) + '%'}\r\n                                />\r\n                            )\r\n                        )}\r\n                    </section>\r\n\r\n                    <section id=\"controls\">\r\n\r\n                        <div className=\"choose\">\r\n                            <span>Choose your progress bar:</span>\r\n                            {progData && progData.bars && (\r\n                                <SelectBox value={progData.bars} />\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className=\"change\">\r\n                            <span>Change your progress bar:</span>\r\n                            {progData && progData.buttons && (\r\n                                progData.buttons.map((value, index) =>\r\n                                    <Button key={index} limit={progData.limit} value={value} />\r\n                                )\r\n                            )}\r\n                        </div>\r\n\r\n                    </section>\r\n                </main>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}