{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Simone\\\\Documents\\\\WebDesign\\\\_Testing\\\\progress-bar\\\\src\\\\template\\\\Main.js\";\nimport React, { Component } from 'react';\n\nfunction ProgressComp(props) {\n  console.log(props);\n  return React.createElement(\"div\", {\n    id: props.id,\n    className: \"progressBar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"percent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.value), React.createElement(\"div\", {\n    style: {\n      width: props.value\n    },\n    className: \"back\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }));\n}\n\nfunction Button(props) {\n  function changeBar() {\n    let progDiv = document.getElementById(props.progress);\n    let number = progDiv.getElementsByClassName(\"percent\")[0];\n    number.innerHTML = props.value;\n    console.log(number);\n  }\n\n  return React.createElement(\"button\", {\n    onClick: changeBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, props.value);\n}\n\nfunction SelectBox(props) {\n  return React.createElement(\"select\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, progData && progData.bars && progData.bars.map((value, index) => React.createElement(\"option\", {\n    key: index,\n    value: 'progress' + index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Progress \", index + 1)));\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      progData: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://pb-api.herokuapp.com/bars').then(response => {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        progData: data,\n        loading: false\n      });\n    }).catch(error => {\n      this.setState({\n        error\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          progData = _this$state.progData,\n          loading = _this$state.loading,\n          error = _this$state.error; // Log correctly\n\n    console.log(progData.bars);\n\n    if (error) {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Something went wrong...\"));\n    } else if (loading) {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Please wait...\"));\n    } else {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        id: \"progress\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, progData && progData.bars && progData.bars.map((value, index) => React.createElement(ProgressComp, {\n        key: index,\n        id: 'progress' + index,\n        value: value + '%',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }))), React.createElement(\"section\", {\n        id: \"controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"choose\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Choose your progress bar:\")), React.createElement(\"div\", {\n        className: \"change\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Change your progress bar:\"), progData && progData.buttons && progData.buttons.map((value, index) => React.createElement(Button, {\n        key: index,\n        progress: \"first\",\n        value: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })))));\n    }\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Simone/Documents/WebDesign/_Testing/progress-bar/src/template/Main.js"],"names":["React","Component","ProgressComp","props","console","log","id","value","width","Button","changeBar","progDiv","document","getElementById","progress","number","getElementsByClassName","innerHTML","SelectBox","progData","bars","map","index","Main","constructor","state","loading","componentDidMount","fetch","then","response","json","data","setState","catch","error","render","buttons"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nfunction ProgressComp(props) {\r\n    console.log(props);\r\n    return (\r\n        <div id={props.id} className=\"progressBar\">\r\n            <div className=\"percent\">{props.value}</div>\r\n            <div style={{ width: props.value }} className=\"back\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Button(props) {\r\n\r\n    function changeBar() {\r\n        let progDiv = document.getElementById(props.progress);\r\n        let number = progDiv.getElementsByClassName(\"percent\")[0];\r\n        number.innerHTML = props.value;\r\n        console.log(number);\r\n    }\r\n\r\n    return (\r\n        <button onClick={changeBar}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction SelectBox(props) {\r\n\r\n    return (\r\n        <select>\r\n            {progData && progData.bars &&\r\n                progData.bars.map((value, index) =>\r\n                    <option key={index} value={'progress' + index}>Progress {index + 1}</option>\r\n                )\r\n            }\r\n        </select>\r\n    );\r\n}\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            progData: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://pb-api.herokuapp.com/bars')\r\n            .then(response => { return response.json(); })\r\n            .then((data) => { this.setState({ progData: data, loading: false }) })\r\n            .catch((error) => { this.setState({ error }) });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { progData, loading, error } = this.state;\r\n\r\n        // Log correctly\r\n        console.log(progData.bars);\r\n\r\n        if (error) {\r\n            return <main><span>Something went wrong...</span></main>;\r\n        } else if (loading) {\r\n            return <main><h2>Please wait...</h2></main>;\r\n        } else {\r\n            return (\r\n                <main>\r\n                    <section id=\"progress\">\r\n                        {progData && progData.bars &&\r\n                            progData.bars.map((value, index) =>\r\n                                <ProgressComp key={index} id={'progress' + index} value={value + '%'} />\r\n                            )\r\n                        }\r\n                    </section>\r\n                    <section id=\"controls\">\r\n                        <div className=\"choose\">\r\n                            <span>Choose your progress bar:</span>\r\n\r\n                        </div>\r\n                        <div className=\"change\">\r\n                            <span>Change your progress bar:</span>\r\n                            {progData && progData.buttons &&\r\n                                progData.buttons.map((value, index) =>\r\n                                    <Button key={index} progress=\"first\" value={value} />\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </section>\r\n                </main>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}